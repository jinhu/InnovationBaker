buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:1.0.1"
        classpath "jp.leafytree.gradle:gradle-android-scala-plugin:1.3.1"
        //classpath 'org.robolectric:robolectric-gradle-plugin:1.0.1'
        //classpath 'org.robolectric:robolectric-gradle-plugin:1.0.1'
        //classpath 'org.robolectric.gradle:gradle-android-test-plugin:0.9.3'

    }
}

repositories {
    jcenter()
}

apply plugin: "com.android.application"
apply plugin: "jp.leafytree.android-scala"
//apply plugin: 'org.robolectric'
android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"
	
    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 10
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFile file("proguard-rules.txt")
        }

        release {
            minifyEnabled true
            proguardFile file("proguard-rules.txt")
        }
    }
    dexOptions {
        incremental true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}
//robolectric {
//    // Configure includes / excludes
//    include '**/*Test.class'
//    exclude '**/espresso/**/*.class'
//
//    // Configure max heap size of the test JVM
//    maxHeapSize = '2048m'
//
//    // Configure the test JVM arguments - Does not apply to Java 8
//    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
//
//    // Specify max number of processes (default is 1)
//    maxParallelForks = 4
//
//    // Specify max number of test classes to execute in a test process
//    // before restarting the process (default is unlimited)
//    forkEvery = 150
//
//    // configure whether failing tests should fail the build
//    ignoreFailures true
//
//    // use afterTest to listen to the test execution results
//    afterTest { descriptor, result ->
//        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
//    }
//}
dependencies {
    compile 'org.scala-lang:scala-library:2.11'
    compile 'org.scaloid:scaloid_2.11:3.6.1-10'

    androidTestCompile 'org.scalatest:scalatest_2.11:2.2.4'
    androidTestCompile 'org.scalamock:scalamock-scalatest-support_2.11:3.2.1'
    androidTestCompile "org.robolectric:android-all:5.0.0_r2-robolectric-0"
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.robolectric:robolectric:2.4'
    //androidTestCompile "com.geteit:robotest:0.7"

    // Espresso
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.0')
    androidTestCompile('com.android.support.test:testing-support-lib:0.1')

    // Robolectric
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-integration:1.1'
    // TODO: requires special build of robolectric right now. working on this...
    androidTestCompile('org.robolectric:robolectric:2.4') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'

    }

}
